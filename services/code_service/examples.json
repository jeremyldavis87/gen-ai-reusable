{
  "generate": {
    "specifications": "Create a function that calculates the Fibonacci sequence up to n terms",
    "language": "python",
    "context": "The function should be optimized for performance and include error handling",
    "comments_level": "moderate",
    "style_guide": "PEP 8"
  },
  "document": {
    "code": "def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    \n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence",
    "language": "python",
    "documentation_style": "docstring",
    "include_examples": true
  },
  "refactor": {
    "code": "def calculate_fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    \n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence",
    "language": "python",
    "refactoring_goals": [
      "improve readability",
      "add input validation",
      "optimize performance"
    ]
  },
  "translate": {
    "code": "def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    \n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence",
    "source_language": "python",
    "target_language": "javascript",
    "maintain_comments": true
  },
  "generate_tests": {
    "code": "def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    \n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence",
    "language": "python",
    "test_framework": "pytest",
    "coverage_level": "comprehensive"
  }
} 